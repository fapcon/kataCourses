// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/order": {
            "post": {
                "description": "Add a new order to the store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order to be created",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "order created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "request parsing error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "order creation error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/order/{id}": {
            "get": {
                "description": "Retrieve an order from the store by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Get an order by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order found",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "id error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "417": {
                        "description": "order getting error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an order from the store by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Delete an order by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "order deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "id error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "417": {
                        "description": "order deletion error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pet": {
            "put": {
                "description": "Update an existing pet by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Update an existing pet",
                "parameters": [
                    {
                        "description": "Pet object that needs to be updated",
                        "name": "pet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "request parsing error: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "pet update error: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new pet to the store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Create a new pet",
                "parameters": [
                    {
                        "description": "Pet object that needs to be added",
                        "name": "pet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "request parsing error: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "pet creation error: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pet/findByStatus/{status}": {
            "get": {
                "description": "Get pets by their status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Get pets by status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Status of the pet",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "empty status error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "417": {
                        "description": "pet getting error: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pet/{id}": {
            "get": {
                "description": "Get a single pet by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Get pet by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the pet to get",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    },
                    "400": {
                        "description": "id error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "417": {
                        "description": "pet getting error: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a pet by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Update pet by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the pet to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pet object that needs to be updated",
                        "name": "pet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "id error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "417": {
                        "description": "pet updating error: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a pet by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pets"
                ],
                "summary": "Delete pet by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the pet to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "id error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "417": {
                        "description": "pet deletion error: \u003cerror message\u003e",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "request parsing error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "user creation error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/createWithArray": {
            "post": {
                "description": "Create multiple users from a list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create multiple users",
                "parameters": [
                    {
                        "description": "Array of users",
                        "name": "users",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "request parsing error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "user array creation error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Authenticate a user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User login succeed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "request parsing error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "login error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "description": "Invalidate a user's JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Logout a user",
                "parameters": [
                    {
                        "description": "JWT token to invalidate",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user logout succeed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad token error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{username}": {
            "put": {
                "description": "Update a user's information by their username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user to update",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "request parsing error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "417": {
                        "description": "user update error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by their username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username of the user to delete",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "empty name error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "417": {
                        "description": "user deletion error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Order": {
            "type": "object",
            "properties": {
                "complete": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "petId": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "shipDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Pet": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "API Title",
	Description:      "This is a sample geogrpc.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
